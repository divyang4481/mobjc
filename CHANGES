-- Version 0.7.0.0 (r108) ----

* Renamed AllocNative AllocAndInitInstance. Added AllocInstance.
* Added a debug NSObject.SaveStackTraces property which, when set, records
   stack traces for all NSObjects.
* NSObject.ToString now takes a "S" format specifier which will print the stack
   traces if they are enabled.
* Lower case non-nullary method names with no underscores are now registered
   with objective-c (and the name is used as is).
* Made some cocoa-pack fixes:
   - The launch script now falls back to a symbolic link if the hard link cannot be
   created (e.g. if mono and the app are on different volumes).
   - The link created by the launch script is now named after the bundle name
   instead of the build time app name.
   - The launch script now works if the app name contains spaces.
* Registrar forces appkit and foundation to load (this avoids registration problems
   when trying to create mcocoa objects before NSApplication is created).
* Fixed a crasher when a subclass of a subclass of NSObject overrides OnDealloc.
* Added a better error message for attempts to override dealloc.
* Fixed some leaky strings when marshaling exceptions.
* copy and mutableCopy methods were broken.
* Made the CocoaException and InvalidCallException ctors internal.
* Added xml documentation.
* Documented the threading semantics of types and methods using a new
   ThreadModelAttribute (which the next version of gendarme will recognize).
* Removed the Smokey DisableRuleAttribute.

-- Version 0.6.0.0 (r76) ----

* Did some work on the cocoa-pack script:
	- Made the bundle's Resources directory the working directory so mono finds
	the mobjc-glue.dylib there instead of the one in /usr/local/lib.
	- Quoted a path so apps launch even if there is a space somewhere in their path.
	- The mono link is now named after the bundle and the link is now hard which
	means that the process name will now be something reasonable instead of "mono".
* mobjc-glue.dylib is now built as a universal binary.
* Moved DisableRuleAttribute, Unused, and WeakList into a Helpers namespace.
* Added a Helpers.Contract class based on Microsoft's contract goo.
* Removed AssertListener.
* make install now creates the /usr/local directories if they do not exist.

-- Version 0.5.0.0 (r56) ----

* Methods that start with a lower case letter are now automagically registered with Cocoa.
* Cache the buffers used by libffi. This aproximately doubles the speed of the slow path.
* The ivar setter now releases the old value and retains the new value.
* Renamed NSObject::CreateNative AllocNative because the caller assumes ownership 
  of the result.
* Removed NSObject::Create (there's no real point to this method because it just 
   created an instance of the root NSObject).
* Added NSObject::Retain to allow clients to retain objects with covariant returns 
   (mcocoa used to declare retain methods for this, but that caused problems with 
   exported types because the Registrar thought the types were overriding retain).
* Added a static NSObject::Class property to return the root NSObject class (and to be
   consistent with the NSObject derived classes in mcocoa).
* Cleaned up pointer marshaling:
    - If the native type is a char* or a unichar* you now must pass in null or an IntPtr:
      System.String will no longer be auto-marshaled to or from const char buffers.
    - There is no longer a special case for float arrays: instead higher level code must
      pass in an IntPtr. 
    - Marshaling of arbitrary arrays and of unions should work (as long as you pass in 
      null or an IntPtr).
* Cleaned up struct marshaling:
    - There is now a better exception if null is passed in.
    - An exception is now thrown if the managed and native structs do not match.
* If an exception is thrown while trying to register an exported method Registrar will
  now include the class and method name in the exception message.
* Fixed the NSObject IntPtr conversion operator so that it works with null objects.
* Fixed the To method so it no longer sometimes throws a NRE and has a better
   exception message for one of the cases.

-- Version 0.4.0.0 (r40) ----

* Renamed IVar IBOutlet.
* DirectCall p/invokes are now externally visible so mcocoa can use them for
  its fast path.
* Optimized object creation and a few other commonly used methods.
* Fixed the registration of types so that we look at the attributes on the
  type alone, not the type and its bases.
* Type registration was not sorting the types quite right so it failed with
  complex exported hierarchies.
* Replaced DBC asserts with Trace.Assert. Unfortunately these default to doing
  nothing. To get asserts to throw you can call the new AssertListener.Install
  method.

-- Version 0.3.0.0 (r16) ----

* Simplified the library:
	- removed support for formatted calls (Call("[[NSFoo alloc] initWithInt:{0}]", 100).
	- removed the Untyped class
	- typing is now stricter: in particular promotions will generally not be
	  done automatically, if native code expects an int you can no longer pass
	  in a short for example
	- replaced NewMethodAttribute and OverrideMethodAttribute with RegisterAttribute
	- public nullary and unary methods that start with a lower case letter are
	  now automatically registered
* Methods that call directly into Objective-C now start with a lower case letter
  (like retain() and mutableCopy()).
* A number of minor bugs have been fixed.

-- Version 0.2.0.0 (r35) ----

* Changed namespace casing.
* Completely changed memory management. NSObject no longer fiddles with 
  reference counts and is not IDisposeable. A one-to-one mapping between
  managed and native instances is now maintained only for exported classes.
  This means that clients can use the same rules in managed code as they
  would in native code.
* The memory unit tests now all pass and the memory stress test in the
  sample no longer exhibits slow growth in the heap size.
* Does a better job marshaling exceptions to native code when they aren't
  serializeable.
* Does a better job marhsaling null to native code.
* Can now use RegisterAttribute on classes to allow them to be used as 
  managed method argument types.  
* NSObject, MethodSignature, and Untyped override Equals and GetHashCode.
* Makefile targets are now rebuilt if gmcs or gcc flags change.
* pkg-config pc file now supports the "Libraries with Unstable APIs" 
  paradigm.
* Renamed NativeValue Untyped.
* Added an IVar class to provide type safe access to instance vars.
* Added Snapshot which returns all NSObject's which are still around (in
  debug).
* Added a cocoa-pack script to build app bundles. This is like mono's
  macpack except:
  - it's not neccesary to delete the bundle before running the script.
  - you can specify flags to use with mono (e.g. --debug).
  - flags passed to the launcher script are forwarded to the assembly.
  - instead of creating a lame Info.plist it copies (and seds) an existing one.
  - mdb files are automatically copied if --debug is in the mono flags.
  - localized resources are supported.
  - .svn directories inside nibs are not copied into the bundle.
  - the script doesn't export any environment variables so it may not 
    work with winforms or other cocoa bridges.




